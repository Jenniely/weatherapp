{"version":3,"sources":["components/Temperature/Temperature.jsx","components/Time/Time.jsx","components/Weather/Weather.jsx","components/Search/Search.jsx","components/Error/Error.jsx","components/ToggleButton/ToggleButton.jsx","App.js","serviceWorker.js","index.js"],"names":["Temperature","props","className","Math","round","data","Time","state","time","moment","utc","add","offset","format","this","intervalID","setInterval","tick","clearInterval","setState","Component","Weather","description","main","Search","handleSubmit","handleChange","userInput","onSubmit","htmlFor","id","name","type","onChange","value","Error","ToggleButton","handleToggle","isToggleOn","onClick","App","e","target","preventDefault","location","prevState","units","weather","timezone","backgroundUrl","hasError","callWeatherApi","callUnsplash","prevProps","query","fetch","then","response","json","catch","width","window","innerWidth","Unsplash","accessKey","secret","callbackUrl","photos","getRandomPhoto","orientation","toJson","urls","raw","style","backgroundImage","temp","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.315e315b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Temperature.css';\r\n\r\nconst Temperature = props => (\r\n    <div className=\"temperature\">\r\n        <h2>{Math.round(props.data)}&deg;</h2>\r\n    </div>\r\n)\r\n\r\nexport default Temperature;","import React, {Component} from 'react';\r\nimport moment from 'moment';\r\nimport './Time.css';\r\n\r\nclass Time extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: moment.utc().add(this.props.offset, 's').format(\"ddd, h:mm:ss A\")\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n            this.intervalID = setInterval(\r\n                () => this.tick(), 1000\r\n            );\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            clearInterval(this.intervalID);\r\n        }\r\n\r\n        tick(props) {\r\n            this.setState({time: moment.utc().add(this.props.offset, 's').format(\"ddd, h:mm:ss A\")});\r\n        }\r\n        render() {\r\n            return (\r\n                <div className=\"time\">\r\n                <h3>{this.state.time}</h3>\r\n            </div>);\r\n        }\r\n}\r\n\r\nexport default Time;","import React from 'react';\r\nimport './Weather.css';\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather\">\r\n        <h2>{props.description.main}</h2>\r\n        <h3>{props.description.description}</h3>\r\n    </div>\r\n)\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './Search.css';\r\n\r\nconst Search = ({handleSubmit, handleChange, userInput}) => (\r\n    <form className='search' onSubmit={handleSubmit}>\r\n        <label htmlFor=\"cityname\"> Enter city</label>\r\n        <input id=\"cityname\" name=\"cityname\" type=\"text\"  onChange={handleChange} value={userInput}/>\r\n        <button>Submit</button>\r\n      </form>\r\n)\r\n\r\nexport default Search;","import React from 'react';\r\nimport './Error.css'\r\n\r\nconst Error = props => (\r\n\r\n    <div className=\"error hidden\">\r\n        <p>Location not found</p>\r\n    </div>\r\n)\r\n\r\nexport default Error;\r\n\r\n","import React from 'react';\r\nimport './ToggleButton.css';\r\n\r\nconst ToggleButton = ({handleToggle, isToggleOn}) => (\r\n    <button className='btn' onClick={handleToggle}>\r\n        {isToggleOn ? 'C' : 'F'}\r\n    </button>\r\n)\r\n\r\nexport default ToggleButton;","import React, { Component } from 'react';\nimport Unsplash, { toJson } from 'unsplash-js';\nimport Temperature from './components/Temperature/Temperature.jsx';\nimport Time from './components/Time/Time.jsx';\nimport Weather from './components/Weather/Weather.jsx';\nimport Search from './components/Search/Search.jsx';\nimport Error from './components/Error/Error.jsx';\nimport ToggleButton from './components/ToggleButton/ToggleButton.jsx';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      location: 'Houston',\n      weather: {},\n      description: {},\n      timezone: 0,\n      userInput: '',\n      units: 'metric',\n      backgroundUrl: '',\n      hasError: false,\n      isToggleOn: true\n    }\n  }\n\n componentDidMount() {\n   this.callWeatherApi(this.state.location, this.state.units);\n   this.callUnsplash('clouds');\n  }\n\ncomponentDidUpdate(prevProps, prevState) {\n    if (prevState.location !== this.state.location || prevState.units !== this.state.units) {\n      this.callUnsplash(this.state.description.main);\n      this.callWeatherApi(this.state.location, this.state.units);\n    } \n  }\n\n  callWeatherApi(location, units) {\n    const apiKey = 'fd9f9132bce794b17d12ce306e8ba0db';\n    const query = `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=${units}&APPID=${apiKey}`;\n    fetch(query)\n    .then(response => response.json())\n    .then(json =>\n      this.setState({ \n        weather: json.main, \n        description: json.weather[0], \n        timezone: json.timezone,\n        hasError: false }))\n    .catch((e) => {\n      this.setState(\n        {\n          hasError: true\n        }\n      )\n\n    });\n  }\n  \n  callUnsplash(query) {\n    const width = window.innerWidth;\n    const unsplash = new Unsplash({\n      accessKey: '3ab23bcb1ed8a2dcbe86f09fa4127e1b976918726521ca7e5ffc4c45e47f940a',\n      secret: '4c54d7372592e3ce053d033a9a5f5e18cee49f86635beaddcdc889c52b8bce6f',\n      callbackUrl: 'http://unsplash-js.herokuapp.com'\n    });\n    unsplash.photos.getRandomPhoto({ query: query, orientation: 'landscape' })\n    .then(toJson)\n    .then(json => {\n        this.setState({backgroundUrl: json.urls.raw  + `&w=${width}&dpi=2`});\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      userInput: e.target.value,\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.userInput !== '') {\n      this.setState({location: this.state.userInput});\n    }\n  }\n\n  handleToggle = () => {\n\t\tthis.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn\n    }));\n     if (this.state.units === 'metric') {\n     this.setState({units:'imperial'})\n    };\n    if (this.state.units === 'imperial') {\n      this.setState({units: 'metric'})\n     };\n  }\n\n  render() {\n    const {location, weather, description, timezone, userInput, backgroundUrl, hasError, isToggleOn} = this.state;\n    return (\n      <div className=\"App\" style={{backgroundImage: `url(${backgroundUrl})`}}>  \n      <h2 className='cityName'>{location}</h2>\n      <Time offset={timezone}/>\n      <Temperature data={weather.temp}/>\n      <Weather description={description}/>\n      <Search handleSubmit={this.handleSubmit} userInput={userInput} handleChange={this.handleChange}/>\n      { hasError && <Error /> }\n      <ToggleButton isToggleOn={isToggleOn} handleToggle={this.handleToggle}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}